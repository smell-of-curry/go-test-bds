// AUTO-GENERATED by scripts/generateTypes.ts. Do not edit manually.
// Generated at 2025-08-21T14:19:57.439Z

// Shared external types mapped from Go:
export type Vec3 = [number, number, number];
export type Pos = { x: number; y: number; z: number };
export type Rotation = { yaw: number; pitch: number };
export type Face = 0 | 1 | 2 | 3 | 4 | 5;
export type MovementInput = {
  forward: boolean;
  back: boolean;
  left: boolean;
  right: boolean;
  jump: boolean;
  sneak: boolean;
};

export interface Option {
  index: number;
  value: any;
}

export interface Slot {
  index: number;
  inventory: string;
}

export interface Attack {}

export interface AttackEntity {
  entityRuntimeID: number;
}

export interface BreakBlock {
  pos: Pos;
}

export interface Chat {
  message: string;
}

export interface CustomFormRespond {
  options: Option[];
  ignore: boolean;
}

export interface Disconnect {}

export interface DropSelectedItem {}

export interface EditSign {
  text: string;
}

export interface Interact {}

export interface InteractWithBlock {
  pos: Pos;
  face: Face;
  clickPos: Vec3;
}

export interface Jump {}

export interface LookAtBlock {
  pos: Pos;
}

export interface LookAtEntity {
  runtimeID: number;
}

export interface LookAtLocation {
  location: Vec3;
}

export interface MenuFormRespond {
  response: number;
  ignore: boolean;
}

export interface ModalFormRespond {
  response: boolean;
  ignore: boolean;
}

export interface MoveRawInput {
  forward: boolean;
  back: boolean;
  left: boolean;
  right: boolean;
  jump: boolean;
  sneak: boolean;
  deltaRotation: Rotation;
}

export interface NavigateToBlock {
  pos: Pos;
}

export interface Rejoin {
  delay: number;
}

export interface Respawn {}

export interface Rotate {
  rotation: Rotation;
}

export interface RunCommand {
  command: string;
}

export interface StopBreakingBlock {}

export interface StopNavigating {}

export interface StopUsingItem {}

export interface ToggleCrafterSlot {
  slot: number;
  pos: Pos;
  disabled: boolean;
}

export type InstructionAction =
  | "attack"
  | "attackEntity"
  | "breakBlock"
  | "chat"
  | "customFormRespond"
  | "disconnect"
  | "dropSelectedItem"
  | "editSign"
  | "interact"
  | "interactWithBlock"
  | "jump"
  | "lookAtBlock"
  | "lookAtEntity"
  | "lookAtLocation"
  | "menuFormRespond"
  | "modalFormRespond"
  | "moveRawInput"
  | "navigateToBlock"
  | "rejoin"
  | "respawn"
  | "rotate"
  | "runCommand"
  | "stopBreakingBlock"
  | "stopNavigating"
  | "stopUsingItem"
  | "toggleCrafterSlot";

export interface InstructionParametersByAction {
  attack: Attack;
  attackEntity: AttackEntity;
  breakBlock: BreakBlock;
  chat: Chat;
  customFormRespond: CustomFormRespond;
  disconnect: Disconnect;
  dropSelectedItem: DropSelectedItem;
  editSign: EditSign;
  interact: Interact;
  interactWithBlock: InteractWithBlock;
  jump: Jump;
  lookAtBlock: LookAtBlock;
  lookAtEntity: LookAtEntity;
  lookAtLocation: LookAtLocation;
  menuFormRespond: MenuFormRespond;
  modalFormRespond: ModalFormRespond;
  moveRawInput: MoveRawInput;
  navigateToBlock: NavigateToBlock;
  rejoin: Rejoin;
  respawn: Respawn;
  rotate: Rotate;
  runCommand: RunCommand;
  stopBreakingBlock: StopBreakingBlock;
  stopNavigating: StopNavigating;
  stopUsingItem: StopUsingItem;
  toggleCrafterSlot: ToggleCrafterSlot;
}

export type InstructionPayload =
  | { action: "attack"; parameters: Attack }
  | { action: "attackEntity"; parameters: AttackEntity }
  | { action: "breakBlock"; parameters: BreakBlock }
  | { action: "chat"; parameters: Chat }
  | { action: "customFormRespond"; parameters: CustomFormRespond }
  | { action: "disconnect"; parameters: Disconnect }
  | { action: "dropSelectedItem"; parameters: DropSelectedItem }
  | { action: "editSign"; parameters: EditSign }
  | { action: "interact"; parameters: Interact }
  | { action: "interactWithBlock"; parameters: InteractWithBlock }
  | { action: "jump"; parameters: Jump }
  | { action: "lookAtBlock"; parameters: LookAtBlock }
  | { action: "lookAtEntity"; parameters: LookAtEntity }
  | { action: "lookAtLocation"; parameters: LookAtLocation }
  | { action: "menuFormRespond"; parameters: MenuFormRespond }
  | { action: "modalFormRespond"; parameters: ModalFormRespond }
  | { action: "moveRawInput"; parameters: MoveRawInput }
  | { action: "navigateToBlock"; parameters: NavigateToBlock }
  | { action: "rejoin"; parameters: Rejoin }
  | { action: "respawn"; parameters: Respawn }
  | { action: "rotate"; parameters: Rotate }
  | { action: "runCommand"; parameters: RunCommand }
  | { action: "stopBreakingBlock"; parameters: StopBreakingBlock }
  | { action: "stopNavigating"; parameters: StopNavigating }
  | { action: "stopUsingItem"; parameters: StopUsingItem }
  | { action: "toggleCrafterSlot"; parameters: ToggleCrafterSlot };
